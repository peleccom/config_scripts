#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK
"""
pel_gitid - Git Identity Management Tool

Manages multiple Git identities for different Git servers and repositories.
"""

import argparse
import os
import subprocess
import sys
from pathlib import Path
try:
    import argcomplete
except ImportError:
    print("Warning: argcomplete not found. Install it for command completion support:")
    print("pip install argcomplete")
    print("Then run: activate-global-python-argcomplete --user")
    print("Or for system-wide installation: sudo activate-global-python-argcomplete")

def run_command(cmd, check=True):
    """Run a shell command and return its output"""
    try:
        result = subprocess.run(cmd, check=check, text=True, capture_output=True, shell=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Error: {e.stderr}", file=sys.stderr)
        if check:
            sys.exit(1)
        return None

def get_config_dir():
    """Get the configuration directory"""
    return Path.home() / '.ssh'

def setup_ssh_dir(path):
    """Set up SSH directory with correct permissions"""
    path.mkdir(parents=True, exist_ok=True)
    path.chmod(0o700)

def get_profiles():
    """Get list of available profiles from .ssh directory"""
    config_dir = get_config_dir()
    profiles = []
    if config_dir.exists():
        for path in config_dir.iterdir():
            # Check if directory contains both id_rsa and user.sh
            if path.is_dir() and (path / 'id_rsa').exists() and (path / 'user.sh').exists():
                profiles.append(path.name)
    return sorted(profiles)

def get_current_profile():
    """Get current profile based on git config"""
    email = run_command("git config user.email", check=False)
    if not email:
        return None
    
    # Check each profile's user.sh for matching email
    for profile in get_profiles():
        user_script = get_config_dir() / profile / 'user.sh'
        if user_script.exists():
            content = user_script.read_text()
            if email in content:
                return profile
    return None

def get_identity_hosts():
    """Get list of configured identity hosts"""
    config_file = get_config_dir() / 'config'
    hosts = []
    if config_file.exists():
        with open(config_file) as f:
            for line in f:
                if line.strip().startswith('Host ') and not line.strip().endswith('*'):
                    host = line.strip().split()[-1]
                    hosts.append(host)
    return hosts

def list_identities():
    """List all configured Git identities"""
    config_file = get_config_dir() / 'config'
    if not config_file.exists():
        print("No SSH config file found.")
        return

    print("Configured Git identities:")
    with open(config_file) as f:
        for line in f:
            if line.strip().startswith('Host ') and not line.strip().endswith('*'):
                host = line.strip().split()[-1]
                print(f"- {host}")

def get_current_identity():
    """Get the current Git identity for the repository"""
    email = run_command("git config user.email", check=False)
    name = run_command("git config user.name", check=False)
    if email and name:
        print(f"Current identity: {name} <{email}>")
        remote = run_command("git remote get-url origin", check=False)
        if remote:
            print(f"Remote: {remote}")
    else:
        print("No Git identity configured for this repository")

def apply_user_config(profile):
    """Apply user.sh configuration from a profile"""
    config_dir = get_config_dir()
    user_script = config_dir / profile / 'user.sh'
    
    if not user_script.exists():
        print(f"Error: user.sh not found for profile {profile}")
        sys.exit(1)
    
    # Read and display the configuration
    print(f"Applying configuration from {profile}:")
    content = user_script.read_text()
    for line in content.splitlines():
        if 'git config' in line and ('user.email' in line or 'user.name' in line):
            print(f"  {line.strip()}")
    
    # Apply the configuration
    run_command(f"bash {user_script}")
    print(f"\nConfiguration applied successfully.")

def switch_identity(profile):
    """Switch to a different Git identity"""
    config_dir = get_config_dir()
    profiles = get_profiles()

    if profile not in profiles:
        print(f"Error: Profile '{profile}' not found. Available profiles: {', '.join(profiles)}")
        sys.exit(1)

    key_file = config_dir / profile / 'id_rsa'
    if not key_file.exists():
        print(f"Error: SSH key not found at {key_file}")
        sys.exit(1)
    
    # Set up git-as integration
    git_as_script = Path.home() / 'config_scripts/git-as.sh'
    if not git_as_script.exists():
        print(f"Error: git-as.sh script not found at {git_as_script}")
        sys.exit(1)

    # Configure git alias
    run_command(f'git config --global alias.{profile} "!{git_as_script} {key_file}"')
    run_command('git config --global credential.helper "cache --timeout=600"')
    
    # Apply user configuration
    apply_user_config(profile)
    print(f"\nSwitched to {profile} identity using {key_file}")

    # Update Git remote if it exists
    remote = run_command("git remote get-url origin", check=False)
    if remote and '@' in remote:
        old_host = remote.split('@')[1].split(':')[0]
        # Try to find matching host in SSH config
        config_file = config_dir / 'config'
        if config_file.exists():
            with open(config_file) as f:
                for line in f:
                    if line.strip().startswith('Host ') and profile in line:
                        host = line.strip().split()[-1]
                        new_remote = remote.replace(old_host, host)
                        run_command(f"git remote set-url origin {new_remote}")
                        print(f"Updated remote to: {new_remote}")
                        break

def create_identity(name, email, host="github.com", key_type="rsa", key_bits=4096):
    """Create a new Git identity"""
    identity = f"{host}-{name}"
    key_dir = get_config_dir() / name
    setup_ssh_dir(key_dir)

    # Generate SSH key
    key_file = key_dir / "id_rsa"
    if not key_file.exists():
        run_command(f"ssh-keygen -t {key_type} -b {key_bits} -f {key_file} -C '{email}' -N ''")

    # Update SSH config
    config_file = get_config_dir() / 'config'
    config_content = f"""
# {name.title()} {host}
Host {identity}
    HostName {host}
    User git
    IdentityFile ~/.ssh/{name}/id_rsa
    IdentitiesOnly yes
"""
    with open(config_file, 'a') as f:
        f.write(config_content)

    # Create Git config script
    user_script = key_dir / "user.sh"
    with open(user_script, 'w') as f:
        f.write(f"""#!/bin/bash
# Global git configuration for {name}
git config user.email "{email}"
git config user.name "{name.title()}"
""")
    user_script.chmod(0o700)

    # Create Git config
    git_config = Path.home() / f'.gitconfig-{name}'
    with open(git_config, 'w') as f:
        f.write(f"""[user]
    name = {name.title()}
    email = {email}
[core]
    sshCommand = "ssh -F ~/.ssh/config -i ~/.ssh/{name}/id_rsa"
""")

    print(f"""Identity '{identity}' created successfully!

To use this identity:
1. Add this public key to {host}:
   {key_file}.pub

2. Test the connection:
   ssh -T git@{identity}

3. Switch to this identity in a repository:
   pel_gitid switch {identity}

4. To set a repository-specific name:
   pel_gitid set-name "Custom Name"
""")

def set_repo_name(name):
    """Set repository-specific user name"""
    if not Path('.git').exists():
        print("Error: Not in a git repository")
        sys.exit(1)
    
    run_command(f'git config user.name "{name}"')
    print(f"Set repository-specific name to: {name}")

def apply_identity(name):
    """Apply an identity's configuration to the current repository"""
    if not Path('.git').exists():
        print("Error: Not in a git repository")
        sys.exit(1)

    config_dir = get_config_dir()
    identity_dir = config_dir / name
    user_script = identity_dir / "user.sh"

    if not identity_dir.exists():
        print(f"Error: Identity '{name}' not found")
        sys.exit(1)

    if not user_script.exists():
        print(f"Error: Configuration script not found for identity '{name}'")
        sys.exit(1)

    run_command(f"bash {user_script}")
    print(f"Applied configuration from identity: {name}")
    get_current_identity()

def profile_completer(prefix, **kwargs):
    """Completion function for profile names"""
    return (p for p in get_profiles() if p.startswith(prefix))

def main():
    parser = argparse.ArgumentParser(description="Git Identity Management Tool")
    subparsers = parser.add_subparsers(dest='command', help='Command to execute')

    # List command
    subparsers.add_parser('list', help='List available profiles')

    # Current command
    subparsers.add_parser('current', help='Show current profile')

    # Switch command
    switch_parser = subparsers.add_parser('switch', help='Switch to a different profile')
    switch_parser.add_argument('profile', help='Profile to switch to').completer = profile_completer

    # Create command
    create_parser = subparsers.add_parser('create', help='Create a new profile')
    create_parser.add_argument('name', help='Profile name')
    create_parser.add_argument('email', help='Email address for the profile')
    create_parser.add_argument('--host', default='github.com', help='Git server hostname (default: github.com)')
    create_parser.add_argument('--key-type', default='rsa', help='SSH key type (default: rsa)')
    create_parser.add_argument('--key-bits', type=int, default=4096, help='SSH key bits (default: 4096)')

    # Set repo name command
    name_parser = subparsers.add_parser('set-name', help='Set repository-specific user name')
    name_parser.add_argument('name', help='Custom name for this repository')

    # Set user command
    setuser_parser = subparsers.add_parser('setuser', help='Apply user configuration from profile')
    setuser_parser.add_argument('profile', nargs='?', help='Profile to apply (current profile if not specified)').completer = profile_completer

    # Enable command completion
    if 'argcomplete' in sys.modules:
        argcomplete.autocomplete(parser)

    args = parser.parse_args()

    if args.command == 'list':
        profiles = get_profiles()
        if not profiles:
            print("No profiles found. Create one with 'pel_gitid create <name> <email>'")
            return
        print("Available profiles:")
        current = get_current_profile()
        for profile in profiles:
            if profile == current:
                print(f"* {profile} (current)")
            else:
                print(f"  {profile}")
    elif args.command == 'current':
        profile = get_current_profile()
        if profile:
            print(f"Current profile: {profile}")
            user_script = get_config_dir() / profile / 'user.sh'
            if user_script.exists():
                print("\nConfiguration:")
                content = user_script.read_text()
                for line in content.splitlines():
                    if 'git config' in line and ('user.email' in line or 'user.name' in line):
                        print(f"  {line.strip()}")
        else:
            print("No profile currently set")
    elif args.command == 'switch':
        switch_identity(args.profile)
    elif args.command == 'create':
        create_identity(args.name, args.email, args.host, args.key_type, args.key_bits)
    elif args.command == 'set-name':
        set_repo_name(args.name)
    elif args.command == 'setuser':
        profile = args.profile or get_current_profile()
        if not profile:
            print("Error: No profile specified and no current profile found")
            sys.exit(1)
        apply_user_config(profile)
    else:
        parser.print_help()

if __name__ == '__main__':
    main()